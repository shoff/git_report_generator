import os
import git
import subprocess
import openai
import datetime
import argparse

from generate_insight import generate_insight
from read_git_logs import read_git_logs
from generate_html_report import generate_html_report

# Configure your OpenAI API key here
openai.api_key = os.environ.get("OPENAI_API_KEY")

def analyze_git_logs_for_insights(logs):
    """
    This function preprocesses the Git logs and then uses OpenAI to generate insights.
    Assumes `logs` is a string containing preprocessed Git log information.
    """
    prompt = f"Dive deep with me into the heart of our project's evolution. I'll sift through the Git commit logs to unearth hidden trends, identify pressing issues, and highlight recurring patterns that catch my eye. Along the way, I'll share captivating insights and uncover the stories behind the code. Let's uncover the secrets woven into our commits together.:\n\n{logs}"
    response = openai.chat.completions.create(
        model="gpt-4-0125-preview",
        messages=[
            {"role": "system", "content": "You are a helpful assistant data scientist analyzing Git commit logs, use your genius for pattern discovery to highlight information human beings could never discern."},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content

def run_code_analysis(directory):
    # well this works fantastic for python apps LOL but not for .NET apps or other languages ooops
    result = subprocess.run(['flake8', directory], capture_output=True, text=True)
    if result.stdout:
        return "Code Analysis Report:\n" + result.stdout
    else:
        return "No issues found."


def main(repository_path, repo_directory, report_directory, base_name=None):
    
    # Configure your repository path and code directory
    repo_path = repository_path if repository_path is not None else os.getcwd()
    directory = repo_directory if repo_directory is not None else os.getcwd()
    report_directory = report_directory if report_directory is not None else f"{os.getcwd()}/reports"
    base_name = base_name if base_name is not None else os.path.basename(repo_path)
    
    # Read Git logs
    commit_logs = read_git_logs(repo_path)
    # print("Git Logs:\n", commit_logs)
        
    # Preprocess and analyze Git logs for insights
    git_log_insights = analyze_git_logs_for_insights(commit_logs)
    print("\nGit Log Analysis Insights:\n", git_log_insights)
    
    # Run code analysis
    analysis_report = run_code_analysis(directory)
    print("\nCode Analysis Report:\n", analysis_report)
    
    # Generate insight using OpenAI
    insight = generate_insight(commit_logs, analysis_report)
    print("\nInsight Generated by OpenAI:\n", insight)
    
    # Generate HTML report
    html_report = generate_html_report(git_log_insights, analysis_report, insight, base_name)
    
    # Generate filename based on the repository name and current date
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    filename = f"{report_directory}//{base_name}_analysis_report_{current_date}.html"
    save_html_report(html_report, filename)
    print("\nHTML report generated successfully.")

def save_html_report(html_content, file_name):
    # Save the HTML content to a file
    with open(file_name, "w", encoding='utf-8') as file:
        file.write(html_content)

# Run the main function to execute all steps and generate the HTML report
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Analyze Git repository and directory.')
    parser.add_argument('--repository_path', type=str, help='Path to the repository', default=os.getcwd())
    parser.add_argument('--repo_directory', type=str, help='Directory to analyze', default=os.getcwd())
    parser.add_argument('--report_directory', type=str, help='Directory to store report', default = f"{os.getcwd()}/reports")
    parser.add_argument('--base_name', type=str, help='Base solution directory', default = f"{os.getcwd()}")
    
    args = parser.parse_args()
    
    main(args.repository_path, args.repo_directory, args.report_directory, args.base_name)

